# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


def fib1(n):
    if n in {0, 1}:
        return n
    else:
        return fib1(n-1) + fib1(n-2)
    
def fib2(n):
        # To store the curr Fibonacci number
    curr = 0

    # To store the previous Fibonacci numbers
    prev1 = 1
    prev2 = 0

    # Loop to calculate Fibonacci numbers from 2 to n
    for i in range(2, n + 1):
      
        # Calculate the curr Fibonacci number
        curr = prev1 + prev2

        # Update prev2 to the last Fibonacci number
        prev2 = prev1

        # Update prev1 to the curr Fibonacci number
        prev1 = curr

    return curr


if __name__=='__main__':
    n = 33
    # 3,524,578
    total = []
    for x in range(n+1):
        curr = fib2(x)
        if curr % 2 == 0:
            total.append(curr)
    print(total)
    print(sum(total))